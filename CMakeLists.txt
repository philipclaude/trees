cmake_minimum_required(VERSION 3.1)
#set(CMAKE_CXX_COMPILER g++-13)

project(trees LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS "-O3 -fPIC -ffast-math -funroll-loops -ffp-contract=fast -Wall")
add_definitions(-DNDEBUG)
#set(CMAKE_CXX_FLAGS "-g -O0 -fsanitize=address")

set(extern_repositories)
function(add_extern_repository name)
	set(options "")
	set(one_value_args GIT_REPOSITORY FULL_HISTORY SKIP_CONFIG)
	set(multi_value_args "")
	cmake_parse_arguments(ARG "${options}" "${one_value_args}" "${multi_value_args}" ${ARGN})
	if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/third_party/${name})	
		if(ARG_GIT_REPOSITORY)
			set(clone_opts --recursive --depth=1 --single-branch)
			if(ARG_FULL_HISTORY)
				set(clone_opts --recursive)
			endif()
			set(fetch_get git)
			set(fetch_url ${ARG_GIT_REPOSITORY})
			set(fetch_arg clone ${clone_opts} ${ARG_GIT_REPOSITORY} ${CMAKE_CURRENT_SOURCE_DIR}/test/${name})
		else()
			message(FATAL_ERROR "unknown repository type")
		endif()
		message(STATUS "fetching ${name} from ${fetch_url}")
		execute_process(COMMAND ${fetch_get} ${fetch_arg} RESULT_VARIABLE status OUTPUT_QUIET ERROR_QUIET)
	endif()
	if(NOT ARG_SKIP_CONFIG)
		add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/test/${name} EXCLUDE_FROM_ALL)
	endif()
	list(APPEND extern_repositories "${CMAKE_CURRENT_SOURCE_DIR}/test/${name}")
	set(extern_repositories ${extern_repositories} PARENT_SCOPE)
endfunction()

option(KDTREE_BUILD_TESTS "build tests" TRUE)
if (${KDTREE_BUILD_TESTS})
	add_extern_repository(nanoflann GIT_REPOSITORY "https://github.com/jlblancoc/nanoflann" SKIP_CONFIG TRUE)
	add_extern_repository(morton GIT_REPOSITORY "https://github.com/morton-nd/morton-nd")
	add_extern_repository(stlext GIT_REPOSITORY "https://github.com/philipclaude/stlext" SKIP_CONFIG TRUE)
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/test/nanoflann/include)
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/test/morton/include)
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/test/stlext)
	include_directories(${CMAKE_CURRENT_SOURCE_DIR})
	add_definitions(-DHAVE_NANOFLANN=1)

	add_executable(test_kdtree test/test_kdtree.cpp)
endif()

# utility to remove external repositories
add_custom_target(clean_extern COMMAND rm -rf ${extern_repositories})


